import random

class Token:
    def _init_(self, name, symbol, total_supply, version="0.0.56789"):
        self.name = name
        self.symbol = symbol
        self.total_supply = total_supply
        self.version = version
        self.accounts = {}  # Store account balances
        self.treasury_balance = total_supply  # Initially, treasury holds all tokens
    
    def create_account(self, account_name, initial_balance=0):
        if account_name in self.accounts:
            print(f"Account '{account_name}' already exists.")
        else:
            if initial_balance <= self.treasury_balance:
                self.accounts[account_name] = initial_balance
                self.treasury_balance -= initial_balance
                print(f"Account '{account_name}' created with balance: {initial_balance} {self.symbol}.")
            else:
                print("Insufficient tokens in treasury to create account with the requested balance.")
    
    def transfer(self, from_account, to_account, amount):
        # Check if the accounts exist
        if from_account not in self.accounts and from_account != "Treasury":
            print(f"Sender account '{from_account}' does not exist.")
            return
        
        if to_account not in self.accounts:
            print(f"Receiver account '{to_account}' does not exist.")
            return
        
        # If transferring from Treasury, ensure Treasury has enough tokens
        if from_account == "Treasury" and self.treasury_balance < amount:
            print(f"Treasury does not have enough balance to transfer {amount} {self.symbol}.")
            return
        
        # Check if sender has enough balance (for normal accounts)
        if from_account != "Treasury" and self.accounts[from_account] < amount:
            print(f"Sender account '{from_account}' does not have enough balance to transfer {amount} {self.symbol}.")
            return
        
        # Perform the transfer
        if from_account == "Treasury":
            self.treasury_balance -= amount
        else:
            self.accounts[from_account] -= amount
        
        self.accounts[to_account] += amount
        print(f"Transferred {amount} {self.symbol} from '{from_account}' to '{to_account}'.")
    
    def balance(self, account_name):
        if account_name == "Treasury":
            return self.treasury_balance
        elif account_name in self.accounts:
            return self.accounts[account_name]
        else:
            print(f"Account '{account_name}' does not exist.")
            return None
    
    def show_info(self):
        print(f"\nToken Created: {self.name} ({self.version})")
        print(f"Treasury Balance: {self.treasury_balance} {self.symbol}")
        for account, balance in self.accounts.items():
            print(f"{account} Balance: {balance} {self.symbol}")
        

# Example Usage
if _name_ == "_main_":
    # Create a fungible token
    my_token = Token(name="MyToken", symbol="MTK", total_supply=1000)

    # Create treasury and recipient accounts
    my_token.create_account("Treasury", 950)  # Treasury starts with 950 MTK
    my_token.create_account("Recipient", 50)  # Recipient starts with 50 MTK

    # Show initial info
    my_token.show_info()

    # Transfer tokens from Treasury to Recipient
    my_token.transfer("Treasury", "Recipient", 100)  # Transfer 100 MTK from Treasury to Recipient

    # Show updated info after transfer
    my_token.show_info()
